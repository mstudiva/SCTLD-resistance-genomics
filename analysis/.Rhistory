stats_ofav_ph <- data.frame(pH = "control pH", growthadj = 0.6, lab = "pH: F1,82 = 0.2, p = 0.6")
stats_ofav_site <- data.frame(pH = "control pH", growthadj = 0.6, lab = "site: F3,82 = 18.2, p < 0.001*")
stats_ofav_genotype <- data.frame(pH = "control pH", growthadj = 0.6, lab = "genotype: F17,82 = 4.1 , p < 0.001*")
stats_ofav_ph <- data.frame(pH = "control pH", growthadj = 0.6, lab = "pH: F1,82 = 0.2, p = 0.7")
stats_ofav_site <- data.frame(pH = "control pH", growthadj = 0.6, lab = "site: F3,82 = 18.2, p < 0.001*")
stats_ofav_genotype <- data.frame(pH = "control pH", growthadj = 0.6, lab = "genotype: F17,82 = 4.1 , p < 0.001*")
stats_ssid_ph <- data.frame(pH = "control pH", growthadj = 0.6, lab = "pH: F1,79 = 4.2, p = 0.045*")
stats_ssid_site <- data.frame(pH = "control pH", growthadj = 0.6, lab = "site: F3,79 = 4.3, p = 0.008*")
stats_ssid_genotype <- data.frame(pH = "control pH", growthadj = 0.6, lab = "genotype: F16,79 = 1.6, p = 0.1")
v
ofav <- ggboxplot(bw_ofav,
x = "site",
y = "growthadj",
fill = "site",
width = 0.7,
size = 0.75,
title = "Orbicella faveolata",
legend = "none") +
facet_grid(~pH) +
xlab(element_blank()) +
ylab("Growth Rate (g cm2 yr-1)") +
scale_fill_manual(values = fill.color) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank()) +
geom_text(data = stats_ofav_ph,label = stats_ofav_ph$lab, aes(x=2, y=0.7)) +
geom_text(data = stats_ofav_site,label = stats_ofav_site$lab, aes(x=2, y=0.65)) +
geom_text(data = stats_ofav_genotype,label = stats_ofav_genotype$lab, aes(x=2, y=0.6)) +
geom_text(data=cld_ofav, aes(x = site, y=-0.13, label=Letter)) +
ylim(-0.13, 0.7)
ofav
ssid <- ggboxplot(bw_ssid,
x = "site",
y = "growthadj",
fill = "site",
width = 0.7,
size = 0.75,
title = "Siderastrea siderea",
legend = "none") +
facet_grid(~pH) +
xlab(element_blank()) +
ylab("Growth Rate (g cm2 yr-1)") +
scale_fill_manual(values = fill.color) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(data = stats_ssid_ph,label = stats_ssid_ph$lab, aes(x=2, y=0.7)) +
geom_text(data = stats_ssid_site,label = stats_ssid_site$lab, aes(x=2, y=0.65)) +
geom_text(data = stats_ssid_genotype,label = stats_ssid_genotype$lab, aes(x=2, y=0.6)) +
geom_text(data=cld_ssid, aes(x = site, y=-0.13, label=Letter)) +
ylim(-0.13, 0.7)
ssid
# both panels
bw_species<-ggarrange(ofav,
ssid,
heights = c(3.9,4),
widths = c(4,4),
ncol = 1,
nrow = 2)
bw_species
ggsave("urban bw.pdf", bw_species, width=8, height=8,dpi = 300)
setwd("~/Library/CloudStorage/GoogleDrive-studivanms@gmail.com/.shortcut-targets-by-id/19m3NwVglpL06Kgwkt5cwhXXyo9OB6b63/Projects/NMFS/Urban/Buoyant Weight")
library(ggplot2)
library(ggpubr)
library(stringr)
library(rcompanion)
library(tidyr)
library(dplyr)
#### data import ####
bw <- read.csv(file="urban buoyant weight.csv", head=T)
bw$tank <- as.factor(bw$tank)
bw$pH <- as.factor(bw$pH)
bw$site=factor(bw$site, levels=c("Emerald", "Rainbow", "Star", "MacN", "control"))
bw$genotype <- as.factor(bw$genotype)
str(bw)
head(bw)
#### data normality and assumption testing ####
bw_subset <- subset(bw, site!="control")
bw_ofav <- bw_subset[bw_subset$species == "Ofav",] # filtering dataset by species
bw_ssid <- bw_subset[bw_subset$species == "Ssid",]
str(bw_ofav)
str(bw_ssid)
# identifying outliers
outliers_ofav <- boxplot(bw_ofav$growthadj, plot=FALSE)$out # 1 outlier
bw_ofav <- bw_ofav[-which(bw_ofav$growthadj %in% outliers_ofav),]
outliers_ssid <- boxplot(bw_ssid$growthadj, plot=FALSE)$out # no outliers
# Shapiro test, p-values below 0.05 indicate violations of normality assumptions
shapiro.test(bw_ofav$growthadj)
# normal
shapiro.test(bw_ssid$growthadj)
# not normal
pdf("urban bw normality.pdf")
par(mfrow=c(2,2))
hist(bw_ofav$growthadj)
hist(bw_ssid$growthadj)
qqnorm(bw_ofav$growthadj)
qqline(bw_ofav$growthadj)
qqnorm(bw_ssid$growthadj)
qqline(bw_ssid$growthadj)
dev.off()
# both species data appear normally distributed
#### statistical tests ####
# ANOVA
# anova <- aov(growthadj ~ pH*species*site+species/site/genotype, data=bw_subset)
# summary(anova)
# capture.output(summary(anova), file = "urban bw anova.txt")
anova_ofav <- aov(growthadj ~ pH*site+site/genotype, data=bw_ofav)
summary(anova_ofav)
# site and site:genotype significant
capture.output(summary(anova_ofav), file = "urban bw ofav anova.txt")
anova_ssid <- aov(growthadj ~ pH*site+site/genotype, data=bw_ssid)
summary(anova_ssid)
# site and pH significant
capture.output(summary(anova_ssid), file = "urban bw ssid anova.txt")
# Tukey post hoc tests
# tukey <- TukeyHSD(anova)
# tukey$`species:site`
# capture.output(tukey$`species:site`, file = "urban bw tukey.txt")
tukey_ofav <- TukeyHSD(anova_ofav)
tukey_ofav$`pH:site`
capture.output(tukey_ofav$`pH:site`, file = "urban bw ofav tukey.txt")
tukey_ssid <- TukeyHSD(anova_ssid)
tukey_ssid$`pH:site`
capture.output(tukey_ssid$`pH:site`, file = "urban bw ssid tukey.txt")
# creating dataframes of the pairwise comparisons needed for plots and doing a bit of table reformatting
# letters <- data.frame(tukey$`species:site`)
# letters$Var <- rownames(letters)
# names(letters)[5] <- "comparison"
# letters$comparison = str_replace_all(letters$comparison,":","_")
# letters$p.adj[is.na(letters$p.adj)] <- 1
# letters
letters_ofav <- data.frame(tukey_ofav$`pH:site`)
letters_ofav$Var <- rownames(letters_ofav)
names(letters_ofav)[5] <- "comparison"
letters_ofav$comparison = str_replace_all(letters_ofav$comparison,":","_")
letters_ofav$p.adj[is.na(letters_ofav$p.adj)] <- 1
letters_ofav
letters_ssid <- data.frame(tukey_ssid$`pH:site`)
letters_ssid$Var <- rownames(letters_ssid)
names(letters_ssid)[5] <- "comparison"
letters_ssid$comparison = str_replace_all(letters_ssid$comparison,":","_")
letters_ssid$p.adj[is.na(letters_ssid$p.adj)] <- 1
letters_ssid
# creates compact letter display of significant pairwise differences for figure
# cld <- cldList(p.adj ~ comparison, data = letters, threshold = 0.05)
# cld %>% separate(Group, c("species", "site")) -> cld
# cld
# subsetting for plotting
# cld_ofav <- cld[cld$species == "Ofav",] # filtering dataset by species
# cld_ssid <- cld[cld$species == "Ssid",]
cld_ofav <- cldList(p.adj ~ comparison, data = letters_ofav, threshold = 0.05)
cld_ofav %>%
separate(Group, c("pH", "site"), sep="_") %>%
mutate(across('pH', str_replace, 'controlpH', 'control pH')) %>%
mutate(across('pH', str_replace, 'lowpH', 'low pH')) -> cld_ofav
cld_ofav
cld_ssid <- cldList(p.adj ~ comparison, data = letters_ssid, threshold = 0.05)
cld_ssid %>%
separate(Group, c("pH", "site"), sep="_") %>%
mutate(across('pH', str_replace, 'controlpH', 'control pH')) %>%
mutate(across('pH', str_replace, 'lowpH', 'low pH')) -> cld_ssid
cld_ssid
#### plots ####
fill.color<-c("#018571","#80cdc1","#dfc27d","#a6611a","grey")
stats_ofav_ph <- data.frame(pH = "control pH", growthadj = 0.6, lab = "pH: F1,82 = 0.2, p = 0.6")
stats_ofav_site <- data.frame(pH = "control pH", growthadj = 0.6, lab = "site: F3,82 = 18.2, p < 0.001*")
stats_ofav_genotype <- data.frame(pH = "control pH", growthadj = 0.6, lab = "genotype: F17,82 = 4.1 , p < 0.001*")
stats_ssid_ph <- data.frame(pH = "control pH", growthadj = 0.6, lab = "pH: F1,79 = 8.4, p = 0.005*")
stats_ssid_site <- data.frame(pH = "control pH", growthadj = 0.6, lab = "site: F3,79 = 4.3, p = 0.008*")
stats_ssid_genotype <- data.frame(pH = "control pH", growthadj = 0.6, lab = "genotype: F16,79 = 1.6, p = 0.1")
# plot <- ggboxplot(bw_subset,
#                   x = "site",
#                   y = "growthadj",
#                   fill = "site",
#                   width = 0.7,
#                   size = 0.75,
#                   title = "Buoyant Weight",
#                   legend = "none") +
#   facet_grid(~species) +
#   # geom_text(data = stats_site,label = stats_site$lab, aes(x=4.55, y=-0.02)) +
# geom_text(data = stats_species,label = stats_species$lab, aes(x=4.35, y=-0.06)) +
# geom_text(data = stats_genotype,label = stats_genotype$lab, aes(x=4.29, y=-0.1)) +
# geom_text(data = stats_interaction,label = stats_interaction$lab, aes(x=4.25, y=-0.14)) +
#   xlab(element_blank()) +
#   ylab("growthadj Rate (g cm2 yr-1)") +
#   scale_fill_manual(values = fill.color) +
#   geom_hline(yintercept=0, linetype="dashed", color = "black") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   geom_text(data=cld_ofav, aes(x = site, y=-0.18, label=Letter)) +
#   geom_text(data=cld_ssid, aes(x = site, y=-0.18, label=Letter)) +
#   ylim(-0.18, 0.7)
# plot
#
# ggsave("urban bw.pdf", plot, width=8, height=5,dpi = 300)
ofav <- ggboxplot(bw_ofav,
x = "site",
y = "growthadj",
fill = "site",
width = 0.7,
size = 0.75,
title = "Orbicella faveolata",
legend = "none") +
facet_grid(~pH) +
xlab(element_blank()) +
ylab("Growth Rate (g cm2 yr-1)") +
scale_fill_manual(values = fill.color) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank()) +
geom_text(data = stats_ofav_ph,label = stats_ofav_ph$lab, aes(x=2, y=0.7)) +
geom_text(data = stats_ofav_site,label = stats_ofav_site$lab, aes(x=2, y=0.65)) +
geom_text(data = stats_ofav_genotype,label = stats_ofav_genotype$lab, aes(x=2, y=0.6)) +
geom_text(data=cld_ofav, aes(x = site, y=-0.13, label=Letter)) +
ylim(-0.13, 0.7)
ofav
ssid <- ggboxplot(bw_ssid,
x = "site",
y = "growthadj",
fill = "site",
width = 0.7,
size = 0.75,
title = "Siderastrea siderea",
legend = "none") +
facet_grid(~pH) +
xlab(element_blank()) +
ylab("Growth Rate (g cm2 yr-1)") +
scale_fill_manual(values = fill.color) +
geom_hline(yintercept=0, linetype="dashed", color = "black") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(data = stats_ssid_ph,label = stats_ssid_ph$lab, aes(x=2, y=0.7)) +
geom_text(data = stats_ssid_site,label = stats_ssid_site$lab, aes(x=2, y=0.65)) +
geom_text(data = stats_ssid_genotype,label = stats_ssid_genotype$lab, aes(x=2, y=0.6)) +
geom_text(data=cld_ssid, aes(x = site, y=-0.13, label=Letter)) +
ylim(-0.13, 0.7)
ssid
# both panels
bw_species<-ggarrange(ofav,
ssid,
heights = c(3.9,4),
widths = c(4,4),
ncol = 1,
nrow = 2)
bw_species
ggsave("urban bw.pdf", bw_species, width=8, height=8,dpi = 300)
library(tidyverse)
setwd("~/Documents/GitHub/SCTLD-resistance-genomics/analysis")
wgs <- read.csv("../WGS/symbionts/zooxReads")
View(wgs)
wgs <- read.table("../WGS/symbionts/zooxReads")
zoox = read.delim("../WGS/symbionts/zooxReads", header = FALSE, check.names = FALSE)
wgs = read.delim("../WGS/symbionts/zooxReads", header = FALSE, check.names = FALSE)
View(wgs)
#Reconstruct read mapping output into dataframe usable for analysis
wgs$V2[is.na(wgs$V2)] <- as.character(wgs$V1[is.na(wgs$V2)])
View(wgs)
wgs$V1 = gsub(pattern = "s*", "chr", wgs$V1)
wgs = read.delim("../WGS/symbionts/wgsReads", header = FALSE, check.names = FALSE)
head(wgs)
wgs$V2 = gsub(".un.*", "", wgs$V2)
head(wgs)
wgs = read.delim("../WGS/symbionts/wgsReads", header = FALSE, check.names = FALSE)
wgs = read.delim("../WGS/symbionts/zooxReads", header = FALSE, check.names = FALSE)
head(wgs)
#Reconstruct read mapping output into dataframe usable for analysis
wgs$V2[is.na(wgs$V2)] <- as.character(wgs$V1[is.na(wgs$V2)])
head(wgs)
wgs$V1 = gsub(pattern = ".un*", "chr", wgs$V1)
head(wgs)
wgs = read.delim("../WGS/symbionts/zooxReads", header = FALSE, check.names = FALSE)
head(wgs)
#Reconstruct read mapping output into dataframe usable for analysis
wgs$V2[is.na(wgs$V2)] <- as.character(wgs$V1[is.na(wgs$V2)])
# wgs$V1 = gsub(pattern = ".un*", "chr", wgs$V1)
# wgs$V2 = gsub(".un.*", "", wgs$V2)
wgs = wgs %>% filter(wgs$V1 != "*")
head(wgs)
wgsLst = split(wgs$V2, as.integer(gl(length(wgs$V2), 20, length(wgs$V2))))
View(wgsLst)
wgsMaps = NULL
for(i in wgsLst){
wgsMaps = rbind(wgsMaps, data.frame(t(i)))
}
View(wgsMaps)
#convert characters to numeric
str(wgsMaps)
for(i in c(2:20)){
wgsMaps[,i] = as.numeric(wgsMaps[,i])
}
str(wgsMaps)
#collapse fake chromosomes into representativ genera
wgsMaps$Symbiodinium = rowSums(wgsMaps[2:6])
wgsMaps$Breviolum = rowSums(wgsMaps[7:10])
wgsMaps$Cladocopium = rowSums(wgsMaps[11:16])
wgsMaps$Durusdinium = rowSums(wgsMaps[17:20])
#keep genera totals and turn into proportions for barplot
wgsMaps = wgsMaps[,c(1, 21:24)]
wgsProp = wgsMaps
wgsProp$sum = apply(wgsProp[, c(2:length(wgsProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
wgsProp = cbind(wgsProp$Sample, (wgsProp[, c(2:(ncol(wgsProp)-1))]
/ wgsProp$sum))
View(wgsMaps)
wgsMaps = NULL
for(i in wgsLst){
wgsMaps = rbind(wgsMaps, data.frame(t(i)))
}
#convert characters to numeric
str(wgsMaps)
for(i in c(2:20)){
wgsMaps[,i] = as.numeric(wgsMaps[,i])
}
str(wgsMaps)
#collapse fake chromosomes into representativ genera
wgsMaps$Symbiodinium = rowSums(wgsMaps[2:6])
wgsMaps$Breviolum = rowSums(wgsMaps[7:10])
wgsMaps$Cladocopium = rowSums(wgsMaps[11:16])
wgsMaps$Durusdinium = rowSums(wgsMaps[17:20])
#keep genera totals and turn into proportions for barplot
wgsMaps = wgsMaps[,c(1, 21:24)]
View(wgsMaps)
View(wgsProp)
wgsProp = wgsMaps
wgsProp$sum = apply(wgsProp[, c(2:length(wgsProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
View(wgsProp)
wgsProp = cbind(wgsProp$X1, (wgsProp[, c(2:(ncol(wgsProp)-1))]
/ wgsProp$sum))
colnames(wgsProp)[1] = "Sample"
head(wgsProp)
#Check that all samples total to 1
apply(wgsProp[, c(2:(ncol(wgsProp)))], 1, function(x) {
sum(x, na.rm = T)
})
View(wgsProp)
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
View(wgsPerc)
wgsPerc$variable=factor(wgsPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
wgsPerc <- melt(Dlab_Perc, id = "variable")
wgsPerc <- reshape2::melt(Dlab_Perc, id = "Sample")
wgsPerc <- reshape2::melt(wgsPerc, id = "Sample")
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
wgsPerc$variable=factor(wgsPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
wgsProp
View(wgsProp)
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
View(wgsPerc)
# percent stacked barplot
wgsPlot <- ggplot(wgsPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "WGS (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
library(tidyverse)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
# percent stacked barplot
wgsPlot <- ggplot(wgsPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "WGS (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
wgsPlot
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=24, height=4, units="in", dpi=300)
View(wgsPerc)
View(wgs)
View(wgsPerc)
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam',)) %>% wgsPerc
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam',)) > wgsPerc
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) > wgsPerc
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
wgsPerc$variable=factor(wgsPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) > wgsPerc
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
wgsPerc$variable=factor(wgsPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
View(wgsPerc)
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) > wgsPerc
# transposing and reformatting dataframes to make abundance a single column
wgsPerc <- reshape2::melt(wgsProp, id = "Sample")
wgsPerc$variable=factor(wgsPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam',''))
View(wgsPerc)
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) <- wgsPerc
wgsPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) -> wgsPerc
View(wgsPerc)
# percent stacked barplot
wgsPlot <- ggplot(wgsPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "WGS (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
wgsPlot
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=24, height=4, units="in", dpi=300)
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=48, height=4, units="in", dpi=300)
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=64, height=4, units="in", dpi=300)
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
View(wgsPerc)
View(wgsProp)
# exporting proportion data
write.csv(wgsProp, file="WGS_zoox.csv")
rad = read.delim("../2bRAD/symbionts/zooxReads", header = FALSE, check.names = FALSE)
head(rad)
#Reconstruct read mapping output into dataframe usable for analysis
rad$V2[is.na(rad$V2)] <- as.character(rad$V1[is.na(rad$V2)])
rad = rad %>% filter(rad$V1 != "*")
radLst = split(rad$V2, as.integer(gl(length(rad$V2), 20, length(rad$V2))))
radMaps = NULL
for(i in radLst){
radMaps = rbind(radMaps, data.frame(t(i)))
}
#convert characters to numeric
str(radMaps)
for(i in c(2:20)){
radMaps[,i] = as.numeric(radMaps[,i])
}
str(radMaps)
#collapse fake chromosomes into representativ genera
radMaps$Symbiodinium = rowSums(radMaps[2:6])
radMaps$Breviolum = rowSums(radMaps[7:10])
radMaps$Cladocopium = rowSums(radMaps[11:16])
radMaps$Durusdinium = rowSums(radMaps[17:20])
#keep genera totals and turn into proportions for barplot
radMaps = radMaps[,c(1, 21:24)]
radProp = radMaps
radProp$sum = apply(radProp[, c(2:length(radProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
radProp = cbind(radProp$X1, (radProp[, c(2:(ncol(radProp)-1))]
/ radProp$sum))
colnames(radProp)[1] = "Sample"
head(radProp)
#Check that all samples total to 1
apply(radProp[, c(2:(ncol(radProp)))], 1, function(x) {
sum(x, na.rm = T)
})
# exporting proportion data
write.csv(radProp, file="2bRAD_zoox.csv")
# transposing and reformatting dataframes to make abundance a single column
radPerc <- reshape2::melt(radProp, id = "Sample")
radPerc$variable=factor(radPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
radPerc %>% mutate(across('Sample', str_replace, '.un.bt2.bam','')) -> radPerc
# percent stacked barplot
radPlot <- ggplot(radPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "2bRAD (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
radPlot
ggsave("WGS symbionts.pdf", plot= radPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
ggsave("WGS symbionts.pdf", plot= wgsPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
ggsave("2bRAD symbionts.pdf", plot= radPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
# transposing and reformatting dataframes to make abundance a single column
radPerc <- reshape2::melt(radProp, id = "Sample")
radPerc$variable=factor(radPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
View(radPerc)
radPerc %>% mutate(across('Sample', str_replace, '.trim.un.bt2.bam','')) -> radPerc
# percent stacked barplot
radPlot <- ggplot(radPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "2bRAD (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
radPlot
ggsave("2bRAD symbionts.pdf", plot= radPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
# transposing and reformatting dataframes to make abundance a single column
radPerc <- reshape2::melt(radProp, id = "Sample")
radPerc$variable=factor(radPerc$variable, levels=c("Symbiodinium","Breviolum","Cladocopium","Durusdinium"))
radPerc %>% mutate(across('Sample', str_replace, '.trim.un.bt2.bam','')) %>%
mutate(across('Sample', str_replace, 'CPR_','')) -> radPerc
View(radPerc)
# percent stacked barplot
radPlot <- ggplot(radPerc, aes(fill=variable, y=value, x=Sample)) +
geom_bar(position="fill", stat="identity") +
labs(x = "Sample",
y = "Relative Abundance",
fill = 'Symbiodiniaceae Genus',
title = "2bRAD (Experimental Genotypes") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(6)) +
theme_classic() +
# geom_text(x = 1.8, y=1.035, label = "Site: F2,21 = 0.9, R2 = 0.085, p = ns") +
theme(plot.title = element_text(hjust=0.5), legend.position = "none", axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank())
radPlot
ggsave("2bRAD symbionts.pdf", plot= radPlot, width=64, height=4, units="in", dpi=300, limitsize = F)
